{"version":3,"sources":["components/CreateCard.js","containers/MainContainer.js","containers/Nav.js","containers/App.js","serviceWorker.js","index.js"],"names":["CreateCard","state","input","handleInput","event","persist","setState","target","value","console","log","handleNewCard","preventDefault","props","createNewCard","onSubmit","this","className","onChange","type","React","Component","MainContainer","cards","fetch","method","headers","Accept","body","JSON","stringify","title","then","resp","json","newCard","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6QAiCeA,E,4MA9BXC,MAAQ,CACJC,MAAO,I,EAGXC,YAAc,SAACC,GACXA,EAAMC,UACN,EAAKC,SAAS,CACVJ,MAAOE,EAAMG,OAAOC,QAExBC,QAAQC,IAAI,EAAKT,Q,EAIrBU,cAAgB,SAACP,GACbA,EAAMQ,iBACN,EAAKC,MAAMC,cAAc,EAAKb,MAAMC,Q,uDAIpC,OACI,0BAAMa,SAAUC,KAAKL,cAAeM,UAAU,iBAC1C,6CACA,2BAAOC,SAAUF,KAAKb,YAAac,UAAU,iBAAiBE,KAAK,OAAOX,MAAOQ,KAAKf,MAAMC,QAC5F,2BAAOe,UAAU,iBAAiBE,KAAK,SAASX,MAAM,gB,GAxB7CY,IAAMC,WCGVC,E,4MACjBrB,MAAQ,CACJsB,MAAO,I,EAGXT,cAAgB,SAACZ,GACbsB,MAAM,8BAA+B,CACnCC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,oBAEVC,KAAMC,KAAKC,UAAU,CACnBC,MAAO7B,MAGV8B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAK7B,SAAS,CACZiB,MAAM,GAAD,mBAAM,EAAKtB,MAAMsB,OAAjB,CAAwBY,U,uDAMjC,OACE,yBAAKlB,UAAU,kBACb,kBAAC,EAAD,CAAYH,cAAeE,KAAKF,qB,GA3BDM,IAAMC,WCKlCe,MARf,WACI,OACI,yBAAKnB,UAAU,OACX,qCCWGoB,MAVf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.c413bdea.chunk.js","sourcesContent":["import React from  'react'\n\nclass CreateCard extends React.Component {\n    state = {\n        input: ''\n    }\n    \n    handleInput = (event) => {\n        event.persist();\n        this.setState({\n            input: event.target.value\n        });\n        console.log(this.state);\n\n    }\n\n    handleNewCard = (event) => {\n        event.preventDefault()\n        this.props.createNewCard(this.state.input)\n    }\n        \n    render() {\n        return (\n            <form onSubmit={this.handleNewCard} className=\"new-card-form\">\n                <h4>Create Card 1</h4>\n                <input onChange={this.handleInput} className=\"new-card-input\" type=\"text\" value={this.state.input}></input>\n                <input className=\"new-card-input\" type=\"submit\" value=\"Create\"></input>\n            </form>\n        )\n    }\n}\n\n\nexport default CreateCard;","import React from 'react';\nimport CreateCard from '../components/CreateCard';\n\n\n\nexport default class MainContainer extends React.Component {\n    state = {\n        cards: []\n    }\n\n    createNewCard = (input) => {\n        fetch(\"http://localhost:3000/cards\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n          },\n          body: JSON.stringify({\n            title: input\n          })\n        })\n        .then(resp => resp.json())\n        .then(newCard => {\n          this.setState({\n            cards: [...this.state.cards, newCard]\n          })\n        })\n      }\n\n    render(){\n        return (\n          <div className=\"main-container\">\n            <CreateCard createNewCard={this.createNewCard} />\n          </div>\n        )\n}\n}\n","import React from 'react';\n\nfunction Nav() {\n    return(\n        <div className=\"nav\">\n            <h1>NAV</h1>\n        </div>\n    )\n}\n\nexport default Nav;","import React from 'react';\nimport '../App.css';\nimport MainContainer from './MainContainer'\nimport Nav from './Nav'\nimport CreateCard from '../components/CreateCard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav></Nav>\n      <CreateCard></CreateCard>\n      <MainContainer></MainContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}